{
  "_args": [
    [
      {
        "raw": "react-pdf",
        "scope": null,
        "escapedName": "react-pdf",
        "name": "react-pdf",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/t/project/meteor/canvas"
    ]
  ],
  "_from": "react-pdf@latest",
  "_id": "react-pdf@2.1.7",
  "_inCache": true,
  "_location": "/react-pdf",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-pdf-2.1.7.tgz_1508344674845_0.17472202191129327"
  },
  "_npmUser": {
    "name": "wojtekmaj",
    "email": "kontakt@wojtekmaj.pl"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-pdf",
    "scope": null,
    "escapedName": "react-pdf",
    "name": "react-pdf",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-pdf/-/react-pdf-2.1.7.tgz",
  "_shasum": "9ba1983bcf4cd9b97e1ba027b8b9f4cf25c56502",
  "_shrinkwrap": null,
  "_spec": "react-pdf",
  "_where": "/home/t/project/meteor/canvas",
  "author": {
    "name": "Wojciech Maj",
    "email": "kontakt@wojtekmaj.pl"
  },
  "bugs": {
    "url": "https://github.com/wojtekmaj/react-pdf/issues"
  },
  "contributors": [
    {
      "name": "Anenth",
      "email": "anenthvishnu@gmail.com"
    },
    {
      "name": "Artur Termenji",
      "email": "atermenji@gmail.com"
    },
    {
      "name": "Bart Van Houtte",
      "email": "bart.van.houtte@ading.be"
    },
    {
      "name": "Niklas Närhinen",
      "email": "niklas@narhinen.net"
    },
    {
      "name": "Thomas McCarthy",
      "email": "tom@tomm.cc"
    }
  ],
  "dependencies": {
    "babel-runtime": "^6.26.0",
    "lodash.once": "^4.1.1",
    "merge-class-names": "^1.1.0",
    "pdfjs-dist": "^1.9.617",
    "prop-types": ">=15.5",
    "webpack": "^3.6.0"
  },
  "description": "Easily display PDF files in your React application.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.1",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^15.1.0",
    "eslint-plugin-class-property": "^1.0.6",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jsx-a11y": "^5.1.1",
    "eslint-plugin-react": "^7.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-KkNPMnwHFdpqFXOJqbmVr6xyJmxqSivF1vQO6gXEkX1NBGI+5UYjHGznRW6T7qO3Fzs2RRjBT7EluTLFKZXIMw==",
    "shasum": "9ba1983bcf4cd9b97e1ba027b8b9f4cf25c56502",
    "tarball": "https://registry.npmjs.org/react-pdf/-/react-pdf-2.1.7.tgz"
  },
  "es6": "src/entry.js",
  "files": [
    "LICENSE",
    "README.md",
    "build/",
    "src/"
  ],
  "gitHead": "fa218f3799fb90416402946e023f5ce598f6644e",
  "homepage": "https://github.com/wojtekmaj/react-pdf#readme",
  "keywords": [
    "pdf",
    "pdf-viewer",
    "react"
  ],
  "license": "MIT",
  "main": "build/entry.js",
  "maintainers": [
    {
      "name": "nnarhinen",
      "email": "niklas@narhinen.net"
    },
    {
      "name": "wojtekmaj",
      "email": "kontakt@wojtekmaj.pl"
    }
  ],
  "name": "react-pdf",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.5.0 || ^16.0.0",
    "react-dom": "^15.5.0 || ^16.0.0"
  },
  "readme": "![downloads](https://img.shields.io/npm/dt/react-pdf.svg) ![build](https://img.shields.io/travis/wojtekmaj/react-pdf.svg) ![dependencies](https://img.shields.io/david/wojtekmaj/react-pdf.svg\n) ![dev dependencies](https://img.shields.io/david/dev/wojtekmaj/react-pdf.svg\n)\n\n# React-PDF\nEasily display PDF files in your React application.\n\n## tl;dr\n* Install by executing `npm install react-pdf` or `yarn add react-pdf`.\n* Import by addding `import { Document } from 'react-pdf'`.\n* Use by adding `<Document file=\"...\" />`. `file` can be an URL, base64 content, Uint8Array, and more.\n* Put `<Page />` components inside `<Document />` to render pages.\n\n## Demo\n\nMinimal demo page is included in sample directory.\n\n[Online demo](http://projekty.wojtekmaj.pl/react-pdf/) is also available!\n\n## Getting started\n\n#### Compatibility\n\nYour project needs to use React 15.5 or later. If you use older version of React, please refer to the table below to find suitable React-PDF version.\n\n|React version|Newest supported React-PDF|\n|----|----|\n|>15.5|latest|\n|>15.0|1.6.1|\n|>0.14|0.0.10|\n|>0.13|0.0.10|\n|>0.11|0.0.4|\n\n### Installation\n\nAdd React-PDF to your project by executing `npm install react-pdf` or `yarn add react-pdf`.\n\n### Usage\n\nHere's an example of basic usage:\n\n```js\nimport React, { Component } from 'react';\nimport { Document, Page } from 'react-pdf';\n\nclass MyApp extends Component {\n  state = {\n    numPages: null,\n    pageNumber: 1,\n  }\n\n  onDocumentLoad({ numPages }) {\n    this.setState({ numPages });\n  }\n\n  render() {\n    return (\n      const { pageNumber, numPages } = this.state;\n\n      <div>\n        <Document\n          file=\"somefile.pdf\"\n          onLoadSuccess={this.onDocumentLoad}\n        >\n          <Page pageNumber={pageNumber} />\n        </Document>\n        <p>Page {pageNumber} of {numPages}</p>\n      </div>\n    );\n  }\n}\n```\n\nCheck the sample directory of this repository for a full working example.\n\n### Enable PDF.js worker\n\nIt is crucial for performance to use PDF.js worker whenever possible. This ensures that your PDF file will be rendered in a separate thread without affecting page performance. To make things a little easier, we've prepared several entry points you can use.\n\n#### Webpack\n\nIf you use Webpack, you're in luck. Instead of directly importing/requiring `'react-pdf'`, import it like so:\n\n```js\nimport { Document } from 'react-pdf/build/entry.webpack';\n```\n\n…and you're all set!\n\n#### Browserify and others\n\nIf you use Browserify or other bundling tools, you will have to make sure on your own that `pdf.worker.js` file from `pdfjs-dist/build` is copied to your project's output folder.\n\n#### I give up\n\nIf you absolutely have to, you can import React PDF with worker disabled. You can do so by importing React-PDF like so:\n\n```js\nimport { Document } from 'react-pdf/build/entry.noworker';\n```\n\n## User guide\n\n### Document\n\nLoads a document passed using `file` prop.\n\n#### Props\n\n|Prop name|Description|Example values|\n|----|----|----|\n|className|Defines custom class name(s), that will be added to rendered element along with the default `ReactPDF__Document`.|<ul><li>String:<br />`\"custom-class-name-1 custom-class-name-2\"`</li><li>Array of strings:<br />`[\"custom-class-name-1\", \"custom-class-name-2\"]`</li></ul>|\n|error|Defines what the component should display in case of an error. Defaults to \"Failed to load PDF file.\".|<ul><li>String:<br />`\"An error occurred!\"`</li><li>React element:<Br />`<div>An error occurred!</div>`</li><li>Function:<Br />`this.renderError()`</li></ul>|\n|file|Defines what PDF should be displayed.<br />Its value can be an URL, a file (imported using `import ... from ...` or from file input form element), or an object with parameters (`url` - URL; `data` - data, preferably Uint8Array; `range` - PDFDataRangeTransport; `httpHeaders` - custom request headers, e.g. for authorization), `withCredentials` - a boolean to indicate whether or not to include cookies in the request (defaults to `false`).|<ul><li>URL:<br />`\"http://example.com/sample.pdf\"`</li><li>File:<br />`import sample from '../static/sample.pdf'` and then<br />`sample`</li><li>Parameter object:<br />`{ url: 'http://example.com/sample.pdf', httpHeaders: { 'X-CustomHeader': '40359820958024350238508234' }, withCredentials: true }`</ul>|\n|loading|Defines what the component should display while loading. Defaults to \"Loading PDF…\".|<ul><li>String:<br />`\"Please wait!\"`</li><li>React element:<Br />`<div>Please wait!</div>`</li><li>Function:<Br />`this.renderLoader()`</li></ul>|\n|noData|Defines what the component should display in case of no data. Defaults to \"No PDF file specified.\".|<ul><li>String:<br />`\"Please select a file.\"`</li><li>React element:<Br />`<div>Please select a file.</div>`</li><li>Function:<Br />`this.renderNoData()`</li></ul>|\n|onLoadError|Function called in case of an error while loading a document.|`(error) => alert('Error while loading document! ' + error.message)`|\n|onLoadSuccess|Function called when the document is successfully loaded.|`(pdf) => alert('Loaded a file with ' + pdf.numPages + ' pages!')`|\n|onSourceError|Function called in case of an error while retrieving document source from `file` prop.|`(error) => alert('Error while retreiving document source! ' + error.message)`|\n|onSourceSuccess|Function called when document source is successfully retreived from `file` prop.|`() => alert('Document source retreived!')`|\n|rotate|Defines the rotation of the document in degrees. If provided, will change rotation globally, even for the pages which were given `rotate` prop of their own. 90 = rotated to the right, 180 = upside down, 270 = rotated to the left.|`90`|\n\n### Page\n\nDisplays a page. Must be placed inside `<Document />` or have `pdf` prop passed, which can be obtained from `<Document />`'s `onLoadSuccess` callback function.\n\n**Note:** `<Page/>` must be a direct child of `<Document />` component. `<Document />` passes necessary props only to its direct children. If you wish to put a component in between of `<Document />` and `<Page/>`, you must ensure to pass all the props to `<Page/>` component by yourself.\n\n#### Props\n\n|Prop name|Description|Example values|\n|----|----|----|\n|className|Defines custom class name(s), that will be added to rendered element along with the default `ReactPDF__Page`.|<ul><li>String:<br />`\"custom-class-name-1 custom-class-name-2\"`</li><li>Array of strings:<br />`[\"custom-class-name-1\", \"custom-class-name-2\"]`</li></ul>|\n|onLoadError|Function called in case of an error while loading the page.|`(error) => alert('Error while loading page! ' + error.message)`|\n|onLoadSuccess|Function called when the page is successfully loaded.|`(page) => alert('Now displaying a page number ' + page.pageNumber + '!')`|\n|onRenderError|Function called in case of an error while rendering the page.|`(error) => alert('Error while loading page! ' + error.message)`|\n|onRenderSuccess|Function called when the page is successfully rendered on the screen.|`() => alert('Rendered the page!')`|\n|pageIndex|Defines which page from PDF file should be displayed. Defaults to 0.|`0`|\n|pageNumber|Defines which page from PDF file should be displayed. If provided, `pageIndex` prop will be ignored. Defaults to 1.|`1`|\n|renderTextLayer|Defines whether a text layer should be rendered. Defaults to true.|`false`|\n|rotate|Defines the rotation of the page in degrees. 90 = rotated to the right, 180 = upside down, 270 = rotated to the left. Defaults to page's default setting, usually 0.|`90`|\n|scale|Defines the scale in which PDF file should be rendered. Defaults to 1.0.|`0.5`|\n|width|Defines the width of the page. If not defined, canvas will be rendered at the width defined in PDF. If you define `width` and `scale` at the same time, the width will be multiplied by a given factor.|`300`|\n\n### Outline\n\nDisplays an outline (table of contents). Must be placed inside `<Document />` or have `pdf` prop passed, which can be obtained from `<Document />`'s `onLoadSuccess` callback function.\n\n#### Props\n\n|Prop name|Description|Example values|\n|----|----|----|\n|className|Defines custom class name(s), that will be added to rendered element along with the default `ReactPDF__Outline`.|<ul><li>String:<br />`\"custom-class-name-1 custom-class-name-2\"`</li><li>Array of strings:<br />`[\"custom-class-name-1\", \"custom-class-name-2\"]`</li></ul>|\n|onItemClick|Function called when an item has been clicked.|`({ pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')`|\n|onLoadError|Function called in case of an error while retreiving the outline.|`(error) => alert('Error while retreiving the outline! ' + error.message)`|\n|onLoadSuccess|Function called when the outline is successfully retreived.|`() => alert('The outline has been successfully retreived.')`|\n|onParseError|Function called in case of an error while parsing the outline.|`(error) => alert('Error while parsing the outline! ' + error.message)`|\n|onParseSuccess|Function called when the outline is successfully parsed.|`({ outline }) => alert('There are ' + outline.length + ' top level items in the table of contents.')`|\n\n## License\n\nThe MIT License.\n\n## Author\n\n<table>\n  <tr>\n    <td>\n      <img src=\"https://github.com/wojtekmaj.png?s=100\" width=\"100\">\n    </td>\n    <td>\n      Wojciech Maj<br />\n      <a href=\"mailto:kontakt@wojtekmaj.pl\">kontakt@wojtekmaj.pl</a><br />\n      <a href=\"http://wojtekmaj.pl\">http://wojtekmaj.pl</a>\n    </td>\n  </tr>\n</table>\n\n## Thank you\n\nThis project wouldn't be possible without awesome work of Niklas Närhinen <niklas@narhinen.net> who created its initial version and without Mozilla, author of [pdf.js](http://mozilla.github.io/pdf.js). Thank you!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wojtekmaj/react-pdf.git"
  },
  "scripts": {
    "build": "babel src -d build",
    "eslint": "eslint ./src",
    "prepublishOnly": "npm run build",
    "test": "npm run eslint"
  },
  "version": "2.1.7"
}
