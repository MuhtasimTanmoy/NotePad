{
  "_args": [
    [
      {
        "raw": "worker-loader@^1.0.0",
        "scope": null,
        "escapedName": "worker-loader",
        "name": "worker-loader",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/t/project/meteor/canvas/node_modules/pdfjs-dist"
    ]
  ],
  "_from": "worker-loader@>=1.0.0 <2.0.0",
  "_id": "worker-loader@1.1.0",
  "_inCache": true,
  "_location": "/worker-loader",
  "_nodeVersion": "8.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/worker-loader-1.1.0.tgz_1508810897626_0.6517039695754647"
  },
  "_npmUser": {
    "name": "d3viant0ne",
    "email": "wiens.joshua@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "worker-loader@^1.0.0",
    "scope": null,
    "escapedName": "worker-loader",
    "name": "worker-loader",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pdfjs-dist"
  ],
  "_resolved": "https://registry.npmjs.org/worker-loader/-/worker-loader-1.1.0.tgz",
  "_shasum": "8cf21869a07add84d66f821d948d23c1eb98e809",
  "_shrinkwrap": null,
  "_spec": "worker-loader@^1.0.0",
  "_where": "/home/t/project/meteor/canvas/node_modules/pdfjs-dist",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/worker-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^1.0.0",
    "schema-utils": "^0.3.0"
  },
  "description": "worker loader module for webpack",
  "devDependencies": {
    "babel-cli": "^6.0.0",
    "babel-jest": "^21.0.0",
    "babel-plugin-transform-object-rest-spread": "^6.0.0",
    "babel-polyfill": "^6.0.0",
    "babel-preset-env": "^1.0.0",
    "cross-env": "^5.0.0",
    "del": "^3.0.0",
    "del-cli": "^1.0.0",
    "eslint": "^4.0.0",
    "eslint-config-webpack": "^1.0.0",
    "eslint-plugin-import": "^2.2.0",
    "jest": "^21.0.0",
    "lint-staged": "^4.0.0",
    "nsp": "^2.6.0",
    "pre-commit": "^1.0.0",
    "standard-version": "^4.0.0",
    "webpack": "^3.0.0",
    "webpack-defaults": "^1.6.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-W91q8Wi1JxbzFQZuLJlFK4x8UuWjKgeOX9IMMyng007K0UkP6I8lOejckoCWY61QmnJq2x9qZ/Viru+uF8g6nA==",
    "shasum": "8cf21869a07add84d66f821d948d23c1eb98e809",
    "tarball": "https://registry.npmjs.org/worker-loader/-/worker-loader-1.1.0.tgz"
  },
  "engines": {
    "node": ">= 4.8 < 5.0.0 || >= 5.10"
  },
  "files": [
    "dist"
  ],
  "gitHead": "20af2e9bfa9f0cf02add4df3fdb5d54ff3fb3ff8",
  "homepage": "https://github.com/webpack-contrib/worker-loader#readme",
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "trysound",
      "email": "trysound@yandex.ru"
    },
    {
      "name": "ericclemmons",
      "email": "eric@smarterspam.com"
    },
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "jtangelder",
      "email": "j.tangelder@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    }
  ],
  "name": "worker-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^2.0.0 || ^3.0.0"
  },
  "pre-commit": "lint-staged",
  "readme": "[![npm][npm]][npm-url]\r\n[![node][node]][node-url]\r\n[![deps][deps]][deps-url]\r\n[![test][test]][test-url]\r\n[![coverage][cover]][cover-url]\r\n[![chat][chat]][chat-url]\r\n\r\n<div align=\"center\">\r\n  <a href=\"https://github.com/webpack/webpack\">\r\n    <img width=\"200\" height=\"200\" src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon.svg\">\r\n  </a>\r\n  <h1>Worker Loader</h1>\r\n  <p>This loader registers the script as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web Worker</a><p>\r\n</div>\r\n\r\n\r\n<h2 align=\"center\">Install</h2>\r\n\r\n```bash\r\nnpm i -D worker-loader\r\n```\r\n\r\n<h2 align=\"center\"><a href=\"https://webpack.js.org/concepts/loaders\">Usage</a></h2>\r\n\r\n### `Inlined`\r\n\r\n**App.js**\r\n```js\r\nimport Worker from 'worker-loader!./Worker.js';\r\n```\r\n\r\n### `Config`\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.worker\\.js$/,\r\n        use: { loader: 'worker-loader' }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n**App.js**\r\n```js\r\nimport Worker from './file.worker.js';\r\n\r\nconst worker = new Worker();\r\n\r\nworker.postMessage({ a: 1 });\r\nworker.onmessage = function (event) {};\r\n\r\nworker.addEventListener(\"message\", function (event) {});\r\n```\r\n\r\n<h2 align=\"center\">Options</h2>\r\n\r\n|Name|Type|Default|Description|\r\n|:--:|:--:|:-----:|:----------|\r\n|[**`name`**](#name)|`{String}`|`[hash].worker.js`|Set a custom name for the output script|\r\n|[**`inline`**](#inline)|`{Boolean}`|`false`|Inline the worker as a BLOB|\r\n|[**`fallback`**](#fallback)|`{Boolean}`|`false`|Require a fallback for non-worker supporting environments|\r\n|[**`publicPath`**](#publicPath)|`{String}`|`null`|Override the path from which worker scripts are downloaded|\r\n\r\n### `name`\r\n\r\nTo set a custom name for the output script, use the `name` parameter. The name may contain the string `[hash]`, which will be replaced with a content dependent hash for caching purposes\r\n\r\n*webpack.config.js**\r\n```js\r\n{\r\n  loader: 'worker-loader',\r\n  options: { name: 'WorkerName.[hash].js' }\r\n}\r\n```\r\n\r\n### `inline`\r\n\r\nYou can also inline the worker as a BLOB with the `inline` parameter\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'worker-loader',\r\n  options: { inline: true }\r\n}\r\n```\r\n\r\n> ℹ️  Inline mode will also create chunks for browsers without support for inline workers, to disable this behavior just set `fallback` parameter as `false`\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'worker-loader'\r\n  options: { inline: true, fallback: false }\r\n}\r\n```\r\n\r\n### `fallback`\r\n\r\nRequire a fallback for non-worker supporting environments\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'worker-loader'\r\n  options: { fallback: false }\r\n}\r\n```\r\n\r\n### `publicPath`\r\n\r\nOverrides the path from which worker scripts are downloaded. If not specified, the same public path used for other\r\nwebpack assets is used\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'worker-loader'\r\n  options: { publicPath: '/scripts/workers/' }\r\n}\r\n```\r\n\r\n<h2 align=\"center\">Examples</h2>\r\n\r\nThe worker file can import dependencies just like any other file\r\n\r\n**Worker.js**\r\n```js\r\nconst _ = require('lodash')\r\n\r\nconst obj = { foo: 'foo' }\r\n\r\n_.has(obj, 'foo')\r\n\r\n// Post data to parent thread\r\nself.postMessage({ foo: 'foo' })\r\n\r\n// Respond to message from parent thread\r\nself.addEventListener('message', (event) => console.log(event))  \r\n```\r\n\r\n### `Integrating with ES2015 Modules`\r\n\r\n> ℹ️  You can even use ES2015 Modules if you have the [`babel-loader`](https://github.com/babel/babel-loader) configured.\r\n\r\n**Worker.js**\r\n```js\r\nimport _ from 'lodash'\r\n\r\nconst obj = { foo: 'foo' }\r\n\r\n_.has(obj, 'foo')\r\n\r\n// Post data to parent thread\r\nself.postMessage({ foo: 'foo' })\r\n\r\n// Respond to message from parent thread\r\nself.addEventListener('message', (event) => console.log(event))\r\n```\r\n\r\n### `Integrating with TypeScript`\r\n\r\nTo integrate with TypeScript, you will need to define a custom module for the exports of your worker\r\n\r\n**typings/custom.d.ts**\r\n```ts\r\ndeclare module \"worker-loader!*\" {\r\n  class WebpackWorker extends Worker {\r\n    constructor();\r\n  }\r\n\r\n  export = WebpackWorker;\r\n}\r\n```\r\n\r\n**Worker.ts**\r\n```ts\r\nconst ctx: Worker = self as any;\r\n\r\n// Post data to parent thread\r\nctx.postMessage({ foo: \"foo\" });\r\n\r\n// Respond to message from parent thread\r\nctx.addEventListener(\"message\", (event) => console.log(event));\r\n```\r\n\r\n**App.ts**\r\n```ts\r\nimport Worker = require(\"worker-loader!./Worker\");\r\n\r\nconst worker = new Worker();\r\n\r\nworker.postMessage({ a: 1 });\r\nworker.onmessage = (event) => {};\r\n\r\nworker.addEventListener(\"message\", (event) => {});\r\n```\r\n\r\n### `Cross-Origin Policy`\r\n\r\n[`WebWorkers`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) are restricted by a [same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy), so if your `webpack` assets are not being served from the same origin as your application, their download may be blocked by your browser. This scenario can commonly occur if you are hosting your assets under a CDN domain. Even downloads from the `webpack-dev-server` could be blocked. There are two workarounds\r\n\r\nFirstly, you can inline the worker as a blob instead of downloading it as an external script via the [`inline`](#inline) parameter\r\n\r\n**App.js**\r\n```js\r\nimport Worker from './file.worker.js';\r\n```\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'worker-loader'\r\n  options: { inline: true }\r\n}\r\n```\r\n\r\nSecondly, you may override the base download URL for your worker script via the [`publicPath`](#publicpath) option\r\n\r\n**App.js**\r\n```js\r\n// This will cause the worker to be downloaded from `/workers/file.worker.js`\r\nimport Worker from './file.worker.js';\r\n```\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'worker-loader'\r\n  options: { publicPath: '/workers/' }\r\n}\r\n```\r\n\r\n<h2 align=\"center\">Maintainers</h2>\r\n\r\n<table>\r\n  <tbody>\r\n    <tr>\r\n      <td align=\"center\">\r\n        <a href=\"https://github.com/TrySound\">\r\n          <img width=\"150\" height=\"150\" src=\"https://avatars3.githubusercontent.com/u/5635476?v=3&s=150\">\r\n        </a>\r\n        <br />\r\n        <a href=\"https://github.com/TrySound\">Bogdan Chadkin</a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <a href=\"https://github.com/bebraw\">\r\n          <img width=\"150\" height=\"150\" src=\"https://github.com/bebraw.png?v=3&s=150\">\r\n          </br>\r\n          Juho Vepsäläinen\r\n        </a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <a href=\"https://github.com/d3viant0ne\">\r\n          <img width=\"150\" height=\"150\" src=\"https://github.com/d3viant0ne.png?v=3&s=150\">\r\n          </br>\r\n          Joshua Wiens\r\n        </a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <a href=\"https://github.com/michael-ciniawsky\">\r\n          <img width=\"150\" height=\"150\" src=\"https://github.com/michael-ciniawsky.png?v=3&s=150\">\r\n          </br>\r\n          Michael Ciniawsky\r\n        </a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <a href=\"https://github.com/evilebottnawi\">\r\n          <img width=\"150\" height=\"150\" src=\"https://github.com/evilebottnawi.png?v=3&s=150\">\r\n          </br>\r\n          Alexander Krasnoyarov\r\n        </a>\r\n      </td>\r\n    </tr>\r\n  <tbody>\r\n</table>\r\n\r\n\r\n[npm]: https://img.shields.io/npm/v/worker-loader.svg\r\n[npm-url]: https://npmjs.com/package/worker-loader\r\n\r\n[node]: https://img.shields.io/node/v/cache-loader.svg\r\n[node-url]: https://nodejs.org\r\n\r\n[deps]: https://david-dm.org/webpack-contrib/worker-loader.svg\r\n[deps-url]: https://david-dm.org/webpack-contrib/worker-loader\r\n\r\n[test]: http://img.shields.io/travis/webpack-contrib/worker-loader.svg\r\n[test-url]: https://travis-ci.org/webpack-contrib/worker-loader\r\n\r\n[cover]: https://codecov.io/gh/webpack-contrib/cache-loader/branch/master/graph/badge.svg\r\n[cover-url]: https://codecov.io/gh/webpack-contrib/cache-loader\r\n\r\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\r\n[chat-url]: https://gitter.im/webpack/webpack\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/worker-loader.git"
  },
  "scripts": {
    "appveyor:test": "npm run test",
    "build": "cross-env NODE_ENV=production babel src -d dist --ignore 'src/**/*.test.js' --copy-files",
    "clean": "del-cli dist",
    "lint": "eslint --cache src test",
    "lint-staged": "lint-staged",
    "posttest": "eslint .",
    "prebuild": "npm run clean",
    "prepublish": "npm run build",
    "release": "standard-version",
    "security": "nsp check",
    "start": "npm run build -- -w",
    "test": "jest",
    "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
    "test:watch": "jest --watch",
    "travis:coverage": "npm run test:coverage -- --runInBand",
    "travis:lint": "npm run lint && npm run security",
    "travis:test": "npm run test -- --runInBand",
    "webpack-defaults": "webpack-defaults"
  },
  "version": "1.1.0"
}
